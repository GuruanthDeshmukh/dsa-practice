package src.main.dsa.gfg.gfg_160_series.arrays_gfg_160;

import java.util.Arrays;

// revision needed
public class D009_Minimize_the_Heights_II {

    public static void main(String[] args) {
//        System.out.println(getMinDiff(new int[]{1, 5, 8, 10}, 2));
//        System.out.println(getMinDiffV2(new int[]{1, 5, 8, 10}, 2));
        System.out.println(getMinDiffV3(new int[]{1, 5, 8, 10}, 2));
//        System.out.println(getMinDiff(new int[]{3, 9, 12, 16, 20}, 3));
//        System.out.println(getMinDiffV2(new int[]{3, 9, 12, 16, 20}, 3));
        System.out.println(getMinDiffV3(new int[]{3, 9, 12, 16, 20}, 3));
//        System.out.println(getMinDiff(new int[]{1,8,10,6,4,6,9,1}, 7));
//        System.out.println(getMinDiffV2(new int[]{1,8,10,6,4,6,9,1}, 7));
        System.out.println(getMinDiffV3(new int[]{1, 8, 10, 6, 4, 6, 9, 1}, 7));
//        System.out.println(getMinDiff(new int[]{380, 705, 706, 177, 710, 416, 853, 147, 957, 693, 631, 891, 287, 277, 976, 210, 876, 77, 205, 172, 741, 810, 959, 399, 710, 157, 222, 934, 887, 413, 617, 72, 503, 390, 489, 373, 34, 944, 719, 832, 726, 115, 803, 827, 920, 306, 455, 104, 956, 301, 3, 980, 812, 739, 634, 25, 408, 319, 213, 684, 335, 371, 574, 595, 965, 186, 784, 43, 70, 859, 261, 153, 595, 531, 424, 280, 874, 897, 588, 251, 482, 560, 940, 395, 63, 129, 389, 91, 498, 919, 721, 994, 461, 303, 885, 288, 990, 311, 901, 445, 10, 542, 55, 271, 348, 389, 645, 826, 310, 765, 271, 996, 383, 728, 360, 41, 581, 444, 24, 781, 781, 678, 10, 729, 937, 851, 286, 904, 745, 61, 754, 569, 837, 771, 429, 695, 874, 682, 380, 544, 411, 779, 312, 35, 994, 685, 207, 510, 711, 309, 91, 167, 232, 90, 480, 721, 226, 350, 193, 81, 735, 202, 318, 377, 256, 785, 391, 292, 700, 945, 444, 251, 386, 741, 271, 184, 828, 694, 26, 434, 821, 42, 590, 440, 236, 501, 291, 769, 49, 832, 7, 579, 175, 656, 169, 635, 298, 985, 933, 580, 764, 562, 181, 35, 3, 610, 621, 379, 732, 259, 655, 644, 838, 358, 969, 146, 48, 799, 44, 947, 149, 722, 342, 744, 386, 814, 714, 776, 252, 698, 727, 665, 943, 157, 838, 952, 981, 810, 584, 675, 267, 732, 304, 478, 643, 734, 428, 483, 101, 647, 561, 61, 295, 139, 263, 342, 863, 917, 427, 271, 430, 948, 197, 769, 455, 971, 425, 794, 368, 926, 601, 714, 865, 706, 779, 6, 211, 972, 79, 236, 699, 557, 340, 656, 278, 900, 283, 190, 743, 516, 683, 562, 399, 151, 447, 5, 692, 19, 853, 856, 237, 469, 793, 558, 365, 388, 418, 573, 239, 871, 18, 541, 553, 585, 171, 780, 683, 747}, 494));
//        System.out.println(getMinDiffV2(new int[]{380, 705, 706, 177, 710, 416, 853, 147, 957, 693, 631, 891, 287, 277, 976, 210, 876, 77, 205, 172, 741, 810, 959, 399, 710, 157, 222, 934, 887, 413, 617, 72, 503, 390, 489, 373, 34, 944, 719, 832, 726, 115, 803, 827, 920, 306, 455, 104, 956, 301, 3, 980, 812, 739, 634, 25, 408, 319, 213, 684, 335, 371, 574, 595, 965, 186, 784, 43, 70, 859, 261, 153, 595, 531, 424, 280, 874, 897, 588, 251, 482, 560, 940, 395, 63, 129, 389, 91, 498, 919, 721, 994, 461, 303, 885, 288, 990, 311, 901, 445, 10, 542, 55, 271, 348, 389, 645, 826, 310, 765, 271, 996, 383, 728, 360, 41, 581, 444, 24, 781, 781, 678, 10, 729, 937, 851, 286, 904, 745, 61, 754, 569, 837, 771, 429, 695, 874, 682, 380, 544, 411, 779, 312, 35, 994, 685, 207, 510, 711, 309, 91, 167, 232, 90, 480, 721, 226, 350, 193, 81, 735, 202, 318, 377, 256, 785, 391, 292, 700, 945, 444, 251, 386, 741, 271, 184, 828, 694, 26, 434, 821, 42, 590, 440, 236, 501, 291, 769, 49, 832, 7, 579, 175, 656, 169, 635, 298, 985, 933, 580, 764, 562, 181, 35, 3, 610, 621, 379, 732, 259, 655, 644, 838, 358, 969, 146, 48, 799, 44, 947, 149, 722, 342, 744, 386, 814, 714, 776, 252, 698, 727, 665, 943, 157, 838, 952, 981, 810, 584, 675, 267, 732, 304, 478, 643, 734, 428, 483, 101, 647, 561, 61, 295, 139, 263, 342, 863, 917, 427, 271, 430, 948, 197, 769, 455, 971, 425, 794, 368, 926, 601, 714, 865, 706, 779, 6, 211, 972, 79, 236, 699, 557, 340, 656, 278, 900, 283, 190, 743, 516, 683, 562, 399, 151, 447, 5, 692, 19, 853, 856, 237, 469, 793, 558, 365, 388, 418, 573, 239, 871, 18, 541, 553, 585, 171, 780, 683, 747}, 494));
        System.out.println(getMinDiffV3(new int[]{380, 705, 706, 177, 710, 416, 853, 147, 957, 693, 631, 891, 287, 277, 976, 210, 876, 77, 205, 172, 741, 810, 959, 399, 710, 157, 222, 934, 887, 413, 617, 72, 503, 390, 489, 373, 34, 944, 719, 832, 726, 115, 803, 827, 920, 306, 455, 104, 956, 301, 3, 980, 812, 739, 634, 25, 408, 319, 213, 684, 335, 371, 574, 595, 965, 186, 784, 43, 70, 859, 261, 153, 595, 531, 424, 280, 874, 897, 588, 251, 482, 560, 940, 395, 63, 129, 389, 91, 498, 919, 721, 994, 461, 303, 885, 288, 990, 311, 901, 445, 10, 542, 55, 271, 348, 389, 645, 826, 310, 765, 271, 996, 383, 728, 360, 41, 581, 444, 24, 781, 781, 678, 10, 729, 937, 851, 286, 904, 745, 61, 754, 569, 837, 771, 429, 695, 874, 682, 380, 544, 411, 779, 312, 35, 994, 685, 207, 510, 711, 309, 91, 167, 232, 90, 480, 721, 226, 350, 193, 81, 735, 202, 318, 377, 256, 785, 391, 292, 700, 945, 444, 251, 386, 741, 271, 184, 828, 694, 26, 434, 821, 42, 590, 440, 236, 501, 291, 769, 49, 832, 7, 579, 175, 656, 169, 635, 298, 985, 933, 580, 764, 562, 181, 35, 3, 610, 621, 379, 732, 259, 655, 644, 838, 358, 969, 146, 48, 799, 44, 947, 149, 722, 342, 744, 386, 814, 714, 776, 252, 698, 727, 665, 943, 157, 838, 952, 981, 810, 584, 675, 267, 732, 304, 478, 643, 734, 428, 483, 101, 647, 561, 61, 295, 139, 263, 342, 863, 917, 427, 271, 430, 948, 197, 769, 455, 971, 425, 794, 368, 926, 601, 714, 865, 706, 779, 6, 211, 972, 79, 236, 699, 557, 340, 656, 278, 900, 283, 190, 743, 516, 683, 562, 399, 151, 447, 5, 692, 19, 853, 856, 237, 469, 793, 558, 365, 388, 418, 573, 239, 871, 18, 541, 553, 585, 171, 780, 683, 747}, 494));
    }

    public static int getMinDiff(int[] arr, int k) {
        // code here
        int sum = 0;
        for (int ele : arr) {
            sum += ele;
        }
        int avg = sum / arr.length;
        for (int i = 0; i < arr.length; i++) {
            int ele = arr[i];
            if (avg > k) {
                if (ele < avg) {
                    arr[i] += k;
                } else if (ele > avg) {
                    arr[i] -= k;
                }
            }
        }
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        for (int ele : arr) {
            if (ele < min) {
                min = ele;
            } else if (ele > max) {
                max = ele;
            }
        }
        return max - min;
    }

    public static int getMinDiffV2(int[] arr, int k) {
        // code here
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] <= k)
                arr[i] += k;
            else
                arr[i] -= k;
        }
        int min = arr[0];
        int max = arr[0];
        for (int ele : arr) {
            if (ele < min) {
                min = ele;
            } else if (ele >= max) {
                max = ele;
            }
        }
        return Math.abs(max - min);
    }

    public static int getMinDiffV3(int[] arr, int k) {
        // code here
        Arrays.sort(arr);
        int res = arr[arr.length - 1] - arr[0];
        int arrayMin = arr[0] + k;
        int arrayMax = arr[arr.length - 1] - k;
        int index = 0;
        int min, max;
        while (index < arr.length && arr[index] - k > 0) {
            arr[index] -= k;
            index++;
        }
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] >= k) {
                max = Math.max(arr[i - 1] + k, arrayMax);
                min = Math.min(arr[i] - k, arrayMin);
                res = Math.min(res, max - min);
            }
        }
        return res;
    }

}
